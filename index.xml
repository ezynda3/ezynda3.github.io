<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ed Zynda - Coder, Hacker, Superhero</title>
    <link>http://www.edzynda.com/index.xml</link>
    <description>Recent content on Ed Zynda - Coder, Hacker, Superhero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 Ed Zynda.</copyright>
    <lastBuildDate>Tue, 20 Jun 2017 19:26:44 -0700</lastBuildDate>
    <atom:link href="http://www.edzynda.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting Started With Vue Router</title>
      <link>http://www.edzynda.com/getting-started-with-vue-router/</link>
      <pubDate>Tue, 20 Jun 2017 19:26:44 -0700</pubDate>
      
      <guid>http://www.edzynda.com/getting-started-with-vue-router/</guid>
      <description>&lt;p&gt;I wrote a nice little tutorial on getting started with Vue Router. Check it out over at &lt;a href=&#34;https://scotch.io/tutorials/getting-started-with-vue-router&#34;&gt;Scotch.io&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ethereum Smart Contracts In Solidity Part 4</title>
      <link>http://www.edzynda.com/ethereum-smart-contracts-in-solidity-part-4/</link>
      <pubDate>Tue, 20 Jun 2017 19:19:17 -0700</pubDate>
      
      <guid>http://www.edzynda.com/ethereum-smart-contracts-in-solidity-part-4/</guid>
      <description>&lt;p&gt;In this video I show you how to make Ethereum contracts talk to other contracts.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/8BlK80eQwMA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Ethereum Smart Contracts In Solidity Part 3</title>
      <link>http://www.edzynda.com/ethereum-smart-contracts-in-solidity-part-3/</link>
      <pubDate>Sun, 18 Jun 2017 16:10:59 -0700</pubDate>
      
      <guid>http://www.edzynda.com/ethereum-smart-contracts-in-solidity-part-3/</guid>
      <description>&lt;p&gt;In this video I go over the concept of contract inheritance and how we can build upon an existing contract to create entirely new contracts. I also discuss abstract functions and interfaces.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/kOBet0BPKzg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Ethereum Smart Contracts In Solidity Part 2</title>
      <link>http://www.edzynda.com/ethereum-smart-contracts-in-solidity-part-2/</link>
      <pubDate>Fri, 16 Jun 2017 18:57:30 -0700</pubDate>
      
      <guid>http://www.edzynda.com/ethereum-smart-contracts-in-solidity-part-2/</guid>
      <description>&lt;p&gt;In this video I go over how you can accept funds through your contract using &amp;ldquo;payable&amp;rdquo; functions. I also cover how to destroy a contract and transfer its balance once it is no longer useful to exist on the blockchain.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/js319cgJvrQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Ethereum Smart Contracts In Solidity Part 1</title>
      <link>http://www.edzynda.com/ethereum-smart-contracts-in-solidity-part-1/</link>
      <pubDate>Thu, 15 Jun 2017 19:06:10 -0700</pubDate>
      
      <guid>http://www.edzynda.com/ethereum-smart-contracts-in-solidity-part-1/</guid>
      <description>&lt;p&gt;In this tutorial, I show you the basics of Ethereum smart contracts and explain state variables, functions, modifiers and events.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/xWKq86PWG0o&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Create Your First Ethereum Smart Contract In Solidity</title>
      <link>http://www.edzynda.com/create-your-first-ethereum-smart-contract-in-solidity/</link>
      <pubDate>Wed, 14 Jun 2017 19:09:39 -0700</pubDate>
      
      <guid>http://www.edzynda.com/create-your-first-ethereum-smart-contract-in-solidity/</guid>
      <description>&lt;p&gt;I recently started a YouTube channel for posting some tutorials. Check out my latest video on creating Ethereum smart contracts.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/4Taej55zNY4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Single Executable Web Apps With Go Binary Assets</title>
      <link>http://www.edzynda.com/single-executable-web-apps-with-go-binary-assets/</link>
      <pubDate>Thu, 05 Jan 2017 07:52:54 -0800</pubDate>
      
      <guid>http://www.edzynda.com/single-executable-web-apps-with-go-binary-assets/</guid>
      <description>&lt;p&gt;Go is becoming increasingly popular with building web applications. It&amp;rsquo;s fast, lightweight and easy to learn. Another great feature is to compile your applications into a single redistributable binary. A lot of web applications depend on external assets, however. For the application to work you still need to package your css, JavaScript and image files along with the executable. Let&amp;rsquo;s see if we can fix this.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Imagine you have a single page web application. Your application code is saved in &lt;code&gt;main.go&lt;/code&gt;. Your frontend code is saved in a folder called &lt;code&gt;assets&lt;/code&gt; and called &lt;code&gt;app.js&lt;/code&gt;. You also have a &lt;code&gt;style.css&lt;/code&gt; and a few images. Normally you need to make sure that assets folder exists along side your &lt;code&gt;main&lt;/code&gt; executable wherever you have it deployed. If not your application will complain with a bunch of &lt;code&gt;404 not found&lt;/code&gt; errors.&lt;/p&gt;

&lt;p&gt;In Go, it&amp;rsquo;s possible to convert all of those files to pure Go code and then serve them up like they were sitting on the filesystem. We can accomplish this with two packages &lt;code&gt;jteeuwen/go-bindata&lt;/code&gt; and &lt;code&gt;elazarl/go-bindata-assetfs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first thing we need to do is install the packages.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go get github.com/jteeuwen/go-bindata/...
$ go get github.com/elazarl/go-bindata-assetfs/...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can convert our assets to Go code using the &lt;code&gt;go-bindata&lt;/code&gt; CLI tool.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go-bindata assets/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a file called &lt;code&gt;bindata.go&lt;/code&gt; in your current directory. All the code in that file will be scoped to the &lt;code&gt;main&lt;/code&gt; package. To access any of our files we can use the &lt;code&gt;Asset(string) ([]byte, error)&lt;/code&gt; function. Calling &lt;code&gt;Asset(&amp;quot;assets/app.js&amp;quot;)&lt;/code&gt; will return a &lt;code&gt;[]byte&lt;/code&gt; slice of the &lt;code&gt;app.js&lt;/code&gt; file which we can echo through our web application manually if we wish. An easier method would be to create an endpoint that serves all of those assets as if they were on a fileserver. This is where &lt;code&gt;go-bindata-assetfs&lt;/code&gt; comes in.&lt;/p&gt;

&lt;p&gt;Here is an example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;

	&amp;quot;github.com/elazarl/go-bindata-assetfs&amp;quot;
)

func main() {
	// Use binary asset FileServer
	http.Handle(&amp;quot;/&amp;quot;,
		http.FileServer(
			&amp;amp;assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: &amp;quot;assets&amp;quot;}))

	log.Println(&amp;quot;http server started on :8000&amp;quot;)
	err := http.ListenAndServe(&amp;quot;:8000&amp;quot;, nil)
	if err != nil {
		log.Fatal(&amp;quot;ListenAndServe: &amp;quot;, err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;go-bindata-assetfs&lt;/code&gt; package includes a &lt;code&gt;Struct&lt;/code&gt; type called &lt;code&gt;AssetFS&lt;/code&gt; that implements the &lt;code&gt;http.Filesystem&lt;/code&gt; interface which looks like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type FileSystem interface {
        Open(name string) (File, error)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To initialize a new &lt;code&gt;AssetFS&lt;/code&gt; we need to pass a few of the helper functions generated by &lt;code&gt;go-bindata&lt;/code&gt;. The final property is &lt;code&gt;Prefix&lt;/code&gt; which sets the root of the &lt;code&gt;FileServer&lt;/code&gt; as whatever we specify.&lt;/p&gt;

&lt;p&gt;In this example we are now serving files at &lt;code&gt;/&lt;/code&gt; and any files that were in &lt;code&gt;assets/&lt;/code&gt; are now accessible from that path. It would be simple to place an &lt;code&gt;index.html&lt;/code&gt; file to use as an entrypoint for a single page application.&lt;/p&gt;

&lt;p&gt;Now we no longer have to distribute our assets along with the final executable. This makes our deployments just a little bit easier and more managable.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How Easy Is It To Containerize A Go App?</title>
      <link>http://www.edzynda.com/how-easy-is-it-to-containerize-a-go-app/</link>
      <pubDate>Tue, 27 Dec 2016 09:18:06 -0800</pubDate>
      
      <guid>http://www.edzynda.com/how-easy-is-it-to-containerize-a-go-app/</guid>
      <description>&lt;p&gt;Recently, I wrote an article on how to &lt;a href=&#34;https://scotch.io/bar-talk/build-a-realtime-chat-server-with-go-and-websockets&#34;&gt;create a simple chat server using WebSockets and Go&lt;/a&gt;. I made the &lt;a href=&#34;https://github.com/scotch-io/go-realtime-chat&#34;&gt;source code&lt;/a&gt; available and it&amp;rsquo;s pretty simple to get the example up and running if you have a basic familiarization with Go. I wanted to see if I could make it easier for people to try out though. For this, I looked to the very popular &lt;a href=&#34;https://docker.io&#34;&gt;Docker&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;Docker has been around for quite some time but, I only recently began toying around with it more seriously. At first it seems pretty complicated but as it turns out, it&amp;rsquo;s really simple to use once you get the hang of the basic commands and concepts.&lt;/p&gt;

&lt;p&gt;This is not going to be a tutorial how to get started with Docker though, I&amp;rsquo;m just going to run through the steps of how I turned my chat application into a redistributable container.&lt;/p&gt;

&lt;p&gt;The first step is obviously to have Docker installed for your specific OS. Head on over to the &lt;a href=&#34;https://docker.io&#34;&gt;Docker website&lt;/a&gt; to fetch that.&lt;/p&gt;

&lt;p&gt;The next step is to create a Dockerfile in the same directory you have your app source code. This is just a file that will tell Docker how to build your container. The Dockerfile for my chat application looks just like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM golang:1.7

MAINTAINER Ed Zynda

RUN mkdir /app
COPY . /app

WORKDIR /app/src
RUN go get -u github.com/gorilla/websocket
RUN go build main.go

CMD [&amp;quot;./main&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s have a look at this line by line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM golang:1.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells Docker that I want to start out with an official Docker container called Golang and use the tagged version 1.7. This container has all of the Golang build tools preinstalled and will provide a good base for us to build upon.&lt;/p&gt;

&lt;p&gt;The Docker hub has thousands of containers provided by Docker and the community which you can download and build upon yourself. There are even containers that literally have nothing in them if you want to keep your final container as light as possible.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MAINTAINER Ed Zynda
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This just says that I&amp;rsquo;m the maintainer of this container. I&amp;rsquo;m a poet and I didn&amp;rsquo;t even know it!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN mkdir /app
COPY . /app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;RUN&lt;/code&gt; keyword allows us to run any command we wish inside our container. In this case I just want to create a new directory to hold our application. Next I use the &lt;code&gt;COPY&lt;/code&gt; keyword to move my source code into the container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WORKDIR /app/src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells Docker that I now want to run commands from within the &lt;code&gt;/app/src&lt;/code&gt; directory. This is just like running &lt;code&gt;cd /app/src&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN go get -u github.com/gorilla/webSocket
RUN go build main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this step, I&amp;rsquo;m just running the normal Go commands to pull down dependencies and then compile the application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CMD [&amp;quot;./main&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final step is to tell Docker which command to run when the container is started. In this case I just want to run the binary called &lt;code&gt;main&lt;/code&gt; which is the result of compiling the Go source.&lt;/p&gt;

&lt;p&gt;After creating my Dockerfile, I can now build the container by running the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t ezynda3/go-chat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will build the container, following the steps in the Dockerfile and then tag it with &lt;code&gt;ezynda3/go-chat&lt;/code&gt;. Since I didn&amp;rsquo;t provide a version number the version will automatically be set to &lt;code&gt;latest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This container only exists on my machine right now though. In order to distribute it so others can use it, I need to publish it to a hub. Docker provides a free hub for public containers at &lt;a href=&#34;https://hub.docker.com&#34;&gt;hub.docker.com&lt;/a&gt;. To push the container up just run the following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker push ezynda3/go-chat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker may complain about invalid credentials. In that case run the following after ensuring you have created an account on Docker&amp;rsquo;s hub site.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will prompt you for your credentials and you should be set to run the previous command again.&lt;/p&gt;

&lt;p&gt;Now on any machine that has Docker installed, we can run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull ezynda3/go-chat
docker run -p 8000:8000 ezynda3/go-chat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will pull the container and then run it mapping port &lt;code&gt;8000&lt;/code&gt; from within the container to port &lt;code&gt;8000&lt;/code&gt; on the host machine.&lt;/p&gt;

&lt;p&gt;As you can see, it was pretty easy to create a nice simple container for a Go application.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Single Page Web App With Go And Vue</title>
      <link>http://www.edzynda.com/single-page-web-app-with-go-and-vue/</link>
      <pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.edzynda.com/single-page-web-app-with-go-and-vue/</guid>
      <description>&lt;p&gt;I wrote a nice little tutorial on creating a single page web application using Go and VueJS. Check it out over at &lt;a href=&#34;https://scotch.io/tutorials/create-a-single-page-app-with-go-echo-and-vue&#34;&gt;Scotch.io&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Test The Untestable With AspectMock</title>
      <link>http://www.edzynda.com/test-the-untestable-with-aspectmock/</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.edzynda.com/test-the-untestable-with-aspectmock/</guid>
      <description>&lt;p&gt;Some of us have had the pleasure of working with someone else&amp;rsquo;s ancient codebase to either add new features or fix bugs. It&amp;rsquo;s never fun and usually a pain. Because of the design (or lack thereof) of the application, it doesn&amp;rsquo;t lend itself to unit testing. The code is littered with static method calls, objects instantiated inside methods rather than being injected through a constructor, and other elements of poor design. This makes the codebase very fragile and any small change could break something if you aren&amp;rsquo;t careful. How do we test the untestable? AspectMock to the rescue!&lt;/p&gt;

&lt;p&gt;Using the power of AOP and the Go! AOP framework AspectMock allows you to create test doubles for almost anything anywhere in your code from public and private methods to static methods and even system functions like time().&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at an example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

class UserCreator
{
    public function create(array $data)
    {
        $user = new User($data);
        $user-&amp;gt;save();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have a UserCreator class that depends on a User object to save a newly created user to the database. We&amp;rsquo;ll pretend this works great but would like to have a test in place to avoid any future defects. We need to mock the User object somehow though because we don&amp;rsquo;t want to make any calls to the database during our test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
function testUserCreate()
{
    $user = Test::double(&#39;User&#39;, [&#39;save&#39; =&amp;gt; null]));
    $service = new UserCreator;
    $service-&amp;gt;create([&#39;name&#39; =&amp;gt; &#39;Tony Stark&#39;]);
    $user-&amp;gt;verifyInvoked(&#39;save&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when you run your test, AspectMock basically intercepts the call to the &amp;lsquo;save&amp;rsquo; method and prevents it from touching the database.&lt;/p&gt;

&lt;p&gt;You can even mock builtin PHP functions for greater flexibility.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
namespace demo;
test::func(&#39;demo&#39;, &#39;time&#39;, &#39;now&#39;);
$this-&amp;gt;assertEquals(&#39;now&#39;, time());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AspectMock opens up a whole new world of possibilities when it comes to testing your legacy and even modern projects. Check out the project on &lt;a href=&#34;https://github.com/Codeception/AspectMock&#34; title=&#34;AspectMock&#34;&gt;GitHub&lt;/a&gt; for more detailed documentation and give it a try in one your projects.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simplify PHP Configs With Environment Variables</title>
      <link>http://www.edzynda.com/simplify-php-configs-with-environment-variables/</link>
      <pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.edzynda.com/simplify-php-configs-with-environment-variables/</guid>
      <description>&lt;p&gt;Laravel 5 and above icludes a cool feature to help simplify configuration and deployment to different environments. Before you had to create separate directories within &amp;lsquo;app/config&amp;rsquo; to separate configuration based on the environment. You would then use varying methods to tell Laravel which environment it was in a bootstrap file. This can get pretty messy real quick epecially if you are adding third party libraries that may require some special configuration options.&lt;/p&gt;

&lt;p&gt;In Laravel 5 and above you just create a file name &amp;lsquo;.env&amp;rsquo; and place your configuration in environment variables. The file would look something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;DB_NAME=mydatabse
FOOBAR=baz
SOME_API_KEY=1234abcef
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You would create this file and make sure to add &amp;lsquo;.env&amp;rsquo; to &amp;lsquo;.gitignore&amp;rsquo; in order to keep sensitive data out of your code repository. When you deploy to your different environments you can then just include a &amp;lsquo;.env&amp;rsquo; file that&amp;rsquo;s appropriate for the environment.&lt;/p&gt;

&lt;p&gt;Laravel 4.2 and below doesn&amp;rsquo;t have this but fortunately, with a little bit of tweaking you can add it.&lt;/p&gt;

&lt;p&gt;First we need to include a helpful package that reads &amp;lsquo;.env&amp;rsquo; files and then loads them for PHP to access.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;composer require vlucas/phpdotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re using Laravel 4.2 you next need to edit &amp;lsquo;bootstrap/start.php&amp;rsquo;. If you&amp;rsquo;re using another framework or none at all you just need to add the following code to wherever you bootstrap your application.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
if (is_file(__DIR__ . &#39;/../.env&#39;)) {
	Dotenv::load(__DIR__ . &#39;/../&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will check to see that the file exists and if so, load the data into PHP&amp;rsquo;s $_ENV superglobal array.&lt;/p&gt;

&lt;p&gt;Next we&amp;rsquo;ll need a helper function to grab environment variables or use an acceptable default. If you&amp;rsquo;re using Laravel, place this in &amp;lsquo;app/helpers.php&amp;rsquo; if not you can place it wherever you keep helper functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
if ( ! function_exists(&#39;env&#39;))
{
    /**
     * Gets the value of an environment variable. Supports boolean, empty and null.
     *
     * @param  string  $key
     * @param  mixed   $default
     * @return mixed
     */
    function env($key, $default = null)
    {
        $value = getenv($key);

        if ($value === false) return value($default);

        switch (strtolower($value))
        {
            case &#39;true&#39;:
            case &#39;(true)&#39;:
                return true;

            case &#39;false&#39;:
            case &#39;(false)&#39;:
                return false;

            case &#39;null&#39;:
            case &#39;(null)&#39;:
                return null;

            case &#39;empty&#39;:
            case &#39;(empty)&#39;:
                return &#39;&#39;;
        }

        return $value;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should be able to use .env files an consolidate your configuration data. For example if you need a config file like &amp;lsquo;app/config/sendgrid.php&amp;rsquo; to handle sending mail with SendGrid you can make it look something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
return [
    &#39;api_key&#39; =&amp;gt; env(&#39;SENDGRID_API_KEY&#39;)
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will greatly simplify your deployments and help avoid configuration comlexity in your older Laravel or other non-Laravel applications.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running AJAX Requests Sequentially</title>
      <link>http://www.edzynda.com/running-ajax-requests-sequentially/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.edzynda.com/running-ajax-requests-sequentially/</guid>
      <description>&lt;p&gt;Somewhat recently, I was refactoring a project that was having issues uploading and importing large CSV files. I was running into all kinds of issues from timeout errors to memory allocation exceptions. The solution was to break up the import and upload it in chunks. This alone was pretty easy but I also wanted to include the ability to display the progress of the entire import. The problem was, I was using AJAX to upload the data.&lt;/p&gt;

&lt;p&gt;AJAX is pretty useful in that it allows you to make HTTP requests asynchronously without refreshing the entire page. You can update small sections of the page without reloading. This is great if you don&amp;rsquo;t care what order the requests finish. In my case I needed to upload the data in chunks but also calculate the overall progress based on how much had been uploaded vs how much was remaining. Using AJAX as intended, all of the chunks would be sent at the exact same which opens of the possibiity that a chunk that should be uploaded last would finish before an earlier chunk.&lt;/p&gt;

&lt;p&gt;After banging my head against the wall dealing with Javascript promises and deferred objects, I decided to try a functional programming technique. The solution ended up being recursion. Let&amp;rsquo;s take a look at what I mean.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function recursivePost(url, data) {
  var dfd = $.Deferred();
  var total = data.length;
  var chunk = data.splice(0, 10);
  var payload = {}
            
  payload.data = chunk;
  payload.remaining = total - chunk.length;
            
  $.post(url, payload)
    .success(function (response) {
                    
      updateProgressBar(chunk.length);
                        
      if (response.status == &#39;complete&#39;) {
        dfd.resolve(response);
      } else {
        recursivePost(url, data).done(function(response) {
          dfd.resolve(response);
        });
      }
    })
    .fail(function (response) {
      dfd.reject(response.responseText);
    });
                    
  return dfd.promise();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function above starts out by creating a deferred object which we use to return a promise object at the bottom of the function. This allows us to start the upload process and hold off on doing anything else until all the chunks are finished uploading. Then we take the initial data which should be an array and calculate the total. Then we shave off 10 items from the array using array_splice(). Then we construct a payload object that contains the chunk and then the number of items remaining after this upload completes. This will allow our backend code to determine when the entire process is complete in case it needs to run some additional logic after.&lt;/p&gt;

&lt;p&gt;Using jQuery&amp;rsquo;s handy post() method we can upload the data to the specified URL. On success we can update our progress bar then we check whether there is more to be uploaded. In my case I let the backend decide by sending a &amp;lsquo;complete&amp;rsquo; status. We could also just check whether payload.reaining = 0. If there are still more items we call the same function from within itself. We also attach done() handler to catch the promise returned by that call. This allows the resolved promise from recursive calls to recursivePost to bubble up to the initial call and then be returned at completion.&lt;/p&gt;

&lt;p&gt;If there are no more items to process, we resolve the promise object so the rest of the app knows the upload is complete.&lt;/p&gt;

&lt;p&gt;Because we only run the next request after the previous request succeeds, we prevent the AJAX calls from firing at the same time. Each request is in sequential order and progress can be tracked.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Book: Aspect-Oriented Programming in PHP</title>
      <link>http://www.edzynda.com/new-book-aspect-oriented-programming-in-php/</link>
      <pubDate>Sat, 20 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.edzynda.com/new-book-aspect-oriented-programming-in-php/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been looking for a way to challenge myself as well as showcase some of my knowledge to the world. After some thinking, I&amp;rsquo;ve decided that I would go ahead and write a book.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been reading a lot about aspect-oriented programming and really like what it provides to enhance object-oriented programming. There isn&amp;rsquo;t a lot of information about this in the PHP community so I figured a book would be a great way to drum up some more interest and help create a larger community around the subject of AOP.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve already got a sample of the book up on Leanpub. You can check it out at &lt;a href=&#34;http://leanpub.com/aopinphp&#34;&gt;http://leanpub.com/aopinphp&lt;/a&gt;. Feel free to read it and send me any feedback as far as what you might like to see covered in the rest of the book. I plan on pushing some more updates very soon so expect to see a minimum viable product up and available for purchase in the next few weeks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aspect Oriented PHP Using Go! AOP Framework</title>
      <link>http://www.edzynda.com/aspect-oriented-php-using-go-aop-framework/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.edzynda.com/aspect-oriented-php-using-go-aop-framework/</guid>
      <description>

&lt;p&gt;In my &lt;a href=&#34;http://www.edzynda.com/aspect-oriented-php-and-the-interceptor-pattern&#34;&gt;last article&lt;/a&gt;  we took a look at using aspect oriented programming (AOP) in PHP by installing the excellent AOP PECL extension for PHP. This is great if you have admin access to the servers you run your code on. It&amp;rsquo;s very common though, for people to run their code on shared hosting. These types of providers don&amp;rsquo;t usually provide a way for you to install any extra PHP extensions besides the common extensions they provide. It would much easier if there was a package we could use instead. Lucky for us, there is!&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/goaop/framework&#34;&gt;Go! AOP Framework&lt;/a&gt; for PHP was created by &lt;a href=&#34;https://github.com/lisachenko&#34;&gt;Alexander Lisachenko&lt;/a&gt; and provides a way to use AOP in PHP without installing an extension. It accomplishes this by cleverly using autoloading, reflection and some other nifty features of modern PHP.&lt;/p&gt;

&lt;p&gt;###Installation&lt;/p&gt;

&lt;p&gt;First we need to install the package with composer.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s created a simple compose.json file with our dependencies and also define a simple namespace for our code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;require&amp;quot;: {
        &amp;quot;goaop/framework&amp;quot;: &amp;quot;^0.6.0&amp;quot;
    },
    &amp;quot;autoload&amp;quot;: {
        &amp;quot;psr-4&amp;quot;: {
            &amp;quot;Stark\\&amp;quot;: &amp;quot;src/&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can install from the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ composer install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need to create what we&amp;rsquo;ll call our AOP kernel. This is where we will register our &lt;strong&gt;aspects&lt;/strong&gt;, as we&amp;rsquo;ll see later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// src/AOP/Kernel.php
&amp;lt;?php namespace Stark\AOP;

use Go\Core\AspectKernel;
use Go\Core\AspectContainer;

class Kernel extends AspectKernel
{
    /**
     * Configure an AspectContainer with advisors, aspects and pointcuts
     *
     * @param AspectContainer $container
     *
     * @return void
     */
    protected function configureAop(AspectContainer $container)
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Third we need to initialize the kernel. This should ideally be done in your application&amp;rsquo;s front controller.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// public/index.php
&amp;lt;?php
include __DIR__ . &#39;/../vendor/autoload.php&#39;; // use composer&#39;s autoloader

// Initialize an application aspect container
$applicationAspectKernel = \Stark\AOP\Kernel::getInstance();
$applicationAspectKernel-&amp;gt;init([
    &#39;debug&#39; =&amp;gt; true, // use &#39;false&#39; for production mode
    // Cache directory
    &#39;cacheDir&#39; =&amp;gt; __DIR__ . &#39;/../cache&#39;
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally we can start creating aspects to modify our code.&lt;/p&gt;

&lt;h3 id=&#34;using-go-aop&#34;&gt;Using Go! AOP&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s pretend we have a little Facebook service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// src/Service/Facebook.php
&amp;lt;?php namespace Stark\Service;

class Facebook
{
    public function doStuff()
    {
        echo &amp;quot;Facebook stuff!&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s create an aspect to intercept any method called from that class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// src/AOP/Aspect/Monitor.php
&amp;lt;?php namespace Stark\AOP\Aspect;

use Go\Aop\Aspect;
use Go\Aop\Intercept\FieldAccess;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\After;
use Go\Lang\Annotation\Before;
use Go\Lang\Annotation\Around;
use Go\Lang\Annotation\Pointcut;

/**
 * Monitor aspect
 */
class Monitor implements Aspect
{

    /**
     * Method that will be called before real method
     *
     * @param MethodInvocation $invocation Invocation
     * @Before(&amp;quot;execution(public Stark\Service\Facebook-&amp;gt;*(*))&amp;quot;)
     */
    public function beforeMethodExecution(MethodInvocation $invocation)
    {
        $obj = $invocation-&amp;gt;getThis();
        echo &#39;Calling Before Interceptor for method: &#39;,
        is_object($obj) ? get_class($obj) : $obj,
        $invocation-&amp;gt;getMethod()-&amp;gt;isStatic() ? &#39;::&#39; : &#39;-&amp;gt;&#39;,
        $invocation-&amp;gt;getMethod()-&amp;gt;getName(),
        &#39;()&#39;,
        &amp;quot;&amp;lt;br&amp;gt;\n&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we have to register the new aspect in our kernel.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// src/AOP/Kernel.php
&amp;lt;?php namespace Stark\AOP;

use Go\Core\AspectKernel;
use Go\Core\AspectContainer;
use Stark\AOP\Aspect\Monitor;

class Kernel extends AspectKernel
{
    /**
     * Configure an AspectContainer with advisors, aspects and pointcuts
     *
     * @param AspectContainer $container
     *
     * @return void
     */
    protected function configureAop(AspectContainer $container)
    {
        $container-&amp;gt;registerAspect(new Monitor());
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally in our front controller we can add these few lines to run our little service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// public/index.php
&amp;lt;?php
$fb = new \Stark\Service\Facebook();
$fb-&amp;gt;doStuff();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run index.php you&amp;rsquo;ll get the following output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Calling Before Interceptor for method: Stark\Service\Facebook-&amp;gt;doStuff()
Facebook stuff!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Go! AOP Framework uses annotations rather than global functions to define &lt;strong&gt;jointpoints&lt;/strong&gt; and &lt;strong&gt;pointcuts&lt;/strong&gt;. &amp;lsquo;beforeMethodExecution()&amp;rsquo; is our &lt;strong&gt;advice&lt;/strong&gt; in this instance. We used the &amp;lsquo;@Before&amp;rsquo; annotation to intercept before the method is called. Similarly we can use &amp;lsquo;@After&amp;rsquo; and &amp;lsquo;@Around&amp;rsquo; as joinpoints as well.&lt;/p&gt;

&lt;p&gt;The rest of the annotation defines the pointcut which is &amp;lsquo;execution&amp;rsquo; in this case. We can also use &amp;lsquo;access&amp;rsquo; for reading/writing of class properties, initialization for when a class is first created and many others.&lt;/p&gt;

&lt;p&gt;One other neat trick we can use is intercepting custom annotations. Go! AOP includes Doctrine&amp;rsquo;s annotation reader package so we can create a custom annotation like so.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// src/Annotation/Custom.php
&amp;lt;?php namespace Stark\Annotation;

use Doctrine\Common\Annotations\Annotation;

/**
 * @Annotation
 * @Target(&amp;quot;METHOD&amp;quot;)
 */
class Custom extends Annotation
{
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next let&amp;rsquo;s modify our Facebook service&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// src/Service/Facebook.php
&amp;lt;?php namespace Stark\Service;

use Stark\Annotation\Custom;

class Facebook
{
    /**
     * @Custom
     */
    public function doStuff()
    {
        echo &amp;quot;Facebook stuff!&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;and our aspect.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// src/AOP/Aspect/Monitor.php
&amp;lt;?php namespace Stark\AOP\Aspect;

use Go\Aop\Aspect;
use Go\Aop\Intercept\FieldAccess;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\After;
use Go\Lang\Annotation\Before;
use Go\Lang\Annotation\Around;
use Go\Lang\Annotation\Pointcut;

/**
 * Monitor aspect
 */
class Monitor implements Aspect
{

    /**
     * Method that will be called before real method
     *
     * @param MethodInvocation $invocation Invocation
     * @Before(&amp;quot;@annotation(Stark\Annotation\Custom)&amp;quot;)
     */
    public function beforeMethodExecution(MethodInvocation $invocation)
    {
        $obj = $invocation-&amp;gt;getThis();
        echo &#39;Calling Before Interceptor for method: &#39;,
        is_object($obj) ? get_class($obj) : $obj,
        $invocation-&amp;gt;getMethod()-&amp;gt;isStatic() ? &#39;::&#39; : &#39;-&amp;gt;&#39;,
        $invocation-&amp;gt;getMethod()-&amp;gt;getName(),
        &#39;()&#39;,
        &amp;quot;&amp;lt;br&amp;gt;\n&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We should get the same result as before.&lt;/p&gt;

&lt;p&gt;This framework is full of features and it opens up a lot of new possibilities in PHP. To learn more about what you can do with Go! AOP, check out the official &lt;a href=&#34;http://go.aopphp.com/docs/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aspect Oriented PHP And The Interceptor Pattern</title>
      <link>http://www.edzynda.com/aspect-oriented-php-and-the-interceptor-pattern/</link>
      <pubDate>Sat, 06 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.edzynda.com/aspect-oriented-php-and-the-interceptor-pattern/</guid>
      <description>

&lt;p&gt;There are many ways to modify the behavior of existing code with actually changing the core logic. Some patterns you might be familiar with are the decorator pattern or the observer pattern. Both allow you to take another object and modify the behavior by wrapping your modifcations around the original code. One pattern you might not be familiar with though, is the interceptor pattern.&lt;/p&gt;

&lt;p&gt;The interceptor pattern is a core concept of what is called aspect oriented programming (AOP). AOP aims to improve the modularity of your code by allowing you to separate cross-cutting concerns from the rest of your code.&lt;/p&gt;

&lt;p&gt;An example of a cross-cutting concern is logging. You may want to log when a particular part of your application completes an action but where should the actual logging code go? This can get hairy if you aren&amp;rsquo;t careful. Something like a logger doesn&amp;rsquo;t really fit well into object oriented programing and may lead to code-duplication or scattering. AOP allows you keep your logging code separate from everything else. You can then attach your logger to other parts of the application by using interceptors.&lt;/p&gt;

&lt;p&gt;PHP doesn&amp;rsquo;t come with a built in way for using AOP but luckily there is a very promising PECL extension that provides just that.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;You can find the project, which is currently in beta, on &lt;a href=&#34;https://github.com/AOP-PHP/AOP&#34;&gt;GitHub&lt;/a&gt;. You should be able to install on your favorite Linux distro by runnning:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pecl install aop-beta
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you had issues like I did, try cloning the repo and following the install instructions in the README.&lt;/p&gt;

&lt;h3 id=&#34;using-interceptors&#34;&gt;Using Interceptors&lt;/h3&gt;

&lt;p&gt;An interceptor allows you to modify the behavior of a method by literally intercepting the call before, after or both (around). To do this you specify when you want to intercept the method. This is called the &lt;strong&gt;join-point&lt;/strong&gt;. Next you specify the method or methods you want to intercept. This is called the &lt;strong&gt;pointcut&lt;/strong&gt;. Finally you specify the function you want to use as your interceptor. This is known as an &lt;strong&gt;advice&lt;/strong&gt;. The combination of a pointcut and an advice is known as an &lt;strong&gt;aspect&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The AOP PHP extension provides some handy functions for creating your own interceptors. Let&amp;rsquo;s take a look at a few of them.&lt;/p&gt;

&lt;p&gt;####aop_add_before
This function will create an interceptor that executes, as the name implies, before the method you want to intercept. Check out the following example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

class Admin {
    public function showDashboard()
    {
        echo &#39;Welcome to the admin panel.&#39;;
    }
}

function restrictAccessAdvice()
{
    if ($_SESSION[&#39;user_type&#39;] !== &#39;admin&#39;) {
        throw new Exception(&#39;Access denied!&#39;);
    }
}

aop_add_before(&#39;Admin-&amp;gt;showDashboard()&#39;, &#39;restrictAccessAdvice&#39;);

$_SESSION[&#39;user_type&#39;] = &#39;user&#39;;
$admin = new Admin();

try {
    $admin-&amp;gt;showDashboard();
} catch (Exception $e) {
    echo $e-&amp;gt;getMessage();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In that example we have a really lame class for showing an admin dashboard. We can easily add a layer of security by intercepting method calls related to admin. As you probably can tell, the output from the above code would be this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Access denied!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can match a bunch of methods in the same class by doing something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
aop_add_before(&#39;Admin-&amp;gt;*()&#39;, &#39;restrictAccessAdvice&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####aop_add_after
This function of course creates an interceptor that executes after the specified method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

class Service
{
    public function doSomething()
    {
        echo &#39;Doing something important!&#39; . PHP_EOL;
    }
}

$loggingAdvice = function() {
    echo &#39;Logging something important!&#39; . PHP_EOL;
};

aop_add_after(&#39;Service-&amp;gt;doSomething()&#39;, $loggingAdvice);

$service = new Service();
$service-&amp;gt;doSomething();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s the output from the that example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Doing something important!
Logging something important!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####aop_add_around
This function combines both before and after but the signature is a little different. The advice you specify should take an argurment. The argument passed in is an object representing the join-point. Check out the example below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

class MeatFactory
{
    public function produceHam()
    {
        echo &amp;quot;Here is some ham.&amp;quot; . PHP_EOL;
    }
}

$sandwichAdvice = function(AopJoinPoint $joinPoint)
{
    // before
    echo &amp;quot;Here is some bread.&amp;quot; . PHP_EOL;

    // execute
    $joinPoint-&amp;gt;process();

    // after
    echo &amp;quot;Here is some more bread.&amp;quot; . PHP_EOL;
};

aop_add_around(&#39;MeatFactory-&amp;gt;produce*()&#39;, $sandwichAdvice);

$factory = new MeatFactory();
$factory-&amp;gt;produceHam();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not that we had to explicitly invoke the &amp;lsquo;process()&amp;rsquo; method in order to get any result from the intercepted method. If we wanted to, we could supress the behavior of the intercepted method simply by not calling &amp;lsquo;process()&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Here is some bread.
Here is some ham.
Here is some more bread.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####Modifying Arguments
By passing the AopJoinPoint object to your advice, you can grab all kinds of information about the method being intercepted. You can even modify the arguments passed to the method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

class Greeter
{
    public function sayHello($name)
    {
        echo &amp;quot;Hello {$name}!&amp;quot;;
    }
}

function ucAdvice(AopJoinPoint $joinPoint)
{
    $args = $joinPoint-&amp;gt;getArguments();
    $args[0] = ucwords($args[0]);
    $joinPoint-&amp;gt;setArguments($args);
}

aop_add_before(&#39;Greeter-&amp;gt;sayHello()&#39;, &#39;ucAdvice&#39;);

$greeter = new Greeter();
$greeter-&amp;gt;sayHello(&#39;dave&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Intercepting the method before it runs we can use the &amp;lsquo;getArguments()&amp;rsquo; method to grab the original arguments, modify them and then re-pass them for execution using the &amp;lsquo;setArguments()&amp;rsquo; method.&lt;/p&gt;

&lt;p&gt;Here is the output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Hello Dave!
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;modifying-return-variables&#34;&gt;Modifying Return Variables&lt;/h4&gt;

&lt;p&gt;Modifying return variables is somewhat the same as modifying arguments but you can only do this if you are intercepting after or around a method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

class Calc
{
    public function sum($a, $b)
    {
        return $a + $b;
    }
}

function squareAdvice(AopJoinPoint $joinPoint)
{
    $value = $joinPoint-&amp;gt;getReturnedValue();
    $joinPoint-&amp;gt;setReturnedValue($value * $value);
}

aop_add_after(&#39;Calc-&amp;gt;sum()&#39;, &#39;squareAdvice&#39;);

$calc = new Calc();
echo $calc-&amp;gt;sum(1, 2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just like when we grabbed the arguments we can grab the original return value using &amp;lsquo;getReturnedValue()&amp;rsquo;. The result of this example would, of course, be 9.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s just a handful of things you can do with the AOP extension. Checkout the &lt;a href=&#34;http://www.croes.org/gerald/projects/aop/documentation_aop_extension_php.pdf&#34;&gt;documentation&lt;/a&gt; to learn how to do other things like intercept read/write actions on specific class properties.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>