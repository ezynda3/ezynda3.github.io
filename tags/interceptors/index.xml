<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Interceptors on Ed Zynda - Coder, Hacker, Superhero</title>
    <link>http://www.edzynda.com/tags/interceptors/</link>
    <description>Recent content in Interceptors on Ed Zynda - Coder, Hacker, Superhero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 Ed Zynda.</copyright>
    <lastBuildDate>Tue, 09 Jun 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.edzynda.com/tags/interceptors/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Aspect Oriented PHP Using Go! AOP Framework</title>
      <link>http://www.edzynda.com/aspect-oriented-php-using-go-aop-framework/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.edzynda.com/aspect-oriented-php-using-go-aop-framework/</guid>
      <description>In my last article we took a look at using aspect oriented programming (AOP) in PHP by installing the excellent AOP PECL extension for PHP. This is great if you have admin access to the servers you run your code on. It&amp;rsquo;s very common though, for people to run their code on shared hosting. These types of providers don&amp;rsquo;t usually provide a way for you to install any extra PHP extensions besides the common extensions they provide.</description>
    </item>
    
    <item>
      <title>Aspect Oriented PHP And The Interceptor Pattern</title>
      <link>http://www.edzynda.com/aspect-oriented-php-and-the-interceptor-pattern/</link>
      <pubDate>Sat, 06 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.edzynda.com/aspect-oriented-php-and-the-interceptor-pattern/</guid>
      <description>There are many ways to modify the behavior of existing code with actually changing the core logic. Some patterns you might be familiar with are the decorator pattern or the observer pattern. Both allow you to take another object and modify the behavior by wrapping your modifcations around the original code. One pattern you might not be familiar with though, is the interceptor pattern.
The interceptor pattern is a core concept of what is called aspect oriented programming (AOP).</description>
    </item>
    
  </channel>
</rss>