<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wordpress on Ed Zynda - Coder, Hacker, Superhero</title>
    <link>http://edzynda.com/tags/wordpress/index.xml</link>
    <description>Recent content in Wordpress on Ed Zynda - Coder, Hacker, Superhero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](http://gohugo.io).</copyright>
    <atom:link href="http://edzynda.com/tags/wordpress/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Hooks In WordPress</title>
      <link>http://edzynda.com/using-hooks-in-wordpress/</link>
      <pubDate>Mon, 04 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://edzynda.com/using-hooks-in-wordpress/</guid>
      <description>&lt;p&gt;Every so often I have clients who want me to work on WordPress sites or plugins. I honestly hate working with WordPress. While it&amp;#8217;s one of the most popular CMS products in the world with a massive developer base, I find that anything coded for WordPress tends to follow a tacky and poorly organized form of coding. Coding styles vary wildly from developer to developer and there really is no standard. This makes doing modifications a nightmare.&lt;/p&gt;

&lt;p&gt;As crazy as WordPress development is, it makes up for it with some very helpful features for developers. In the early days of WordPress, if you wanted to add or modify functionality you had to modify the core of WordPress. This is dangerous because as soon as an update comes out, your modification might get wiped out. WordPress then introduced theming and plugin functionality. Along with those features, they allowed for developers to &amp;#8216;hook&amp;#8217; into actual WordPress processes without modifying the core source code.&lt;/p&gt;

&lt;p&gt;The main concept that WordPress developers should be familiar to is &amp;#8216;The Loop&amp;#8217;. Basically every page you go to on a WordPress site is the result of &amp;#8216;The Loop&amp;#8217;. It&amp;#8217;s a set of steps that WordPress goes through to build page you are viewing. For example to view a single post, WordPress might pull the post from the database then call a header() function which pulls in the header template then a content() function and a footer() function then finally rendering the page.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s say that we want to add some extra meta tags to every wordpress page? How would we go about this? First we decide which process we want to hook into. WordPress has quite a few hooks. For this example we&amp;#8217;ll use the &amp;#8216;wp_head&amp;#8217; hook. To use a hook we use the &amp;#8216;add_action&amp;#8217; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
add_action(&#39;wp_head&#39;, &#39;insert_meta_tags&#39;);

function insert_meta_tags() {
    echo &#39;&amp;lt;meta property=&amp;quot;info&amp;quot; content=&amp;quot;Some info&amp;quot; /&amp;gt;&#39;;
    echo &#39;&amp;lt;meta property=&amp;quot;info2&amp;quot; content=&amp;quot;Some more info&amp;quot; /&amp;gt;&#39;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically you specify the hook you want to access and then a function to be called. Once WordPress hits the &amp;#8216;wp_head&amp;#8217; portion of &amp;#8216;The Loop&amp;#8217; it will call the function that you registered. This particular hook is called an action hook. There is another popular hook type called a filter hook. Filter hooks are somewhat different in that they are used to modify specific content like your post title or content. To use a filter hook, we call the &amp;#8216;add_filter&amp;#8217; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
add_filter(&#39;the_content&#39;, &#39;add_some_stuff_to_content&#39;);

function add_some_stuff_to_content($content) {
    $content .= &#39;Blah blah blah&#39;;

    return $content;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you create a filter your callback function is passed the variable that you&amp;#8217;re modifying which is in this case, the content of a post. In this case we appended &amp;#8216;Blah blah blah&amp;#8217; to it and then returned it.&lt;/p&gt;

&lt;p&gt;This is all really just basic stuff but hopefully it gives you an idea of how you can make useful modifications to WordPress.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tip: Custom Scripts In WordPress</title>
      <link>http://edzynda.com/tip-custom-scripts-and-stylesheets-in-wordpress/</link>
      <pubDate>Wed, 18 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://edzynda.com/tip-custom-scripts-and-stylesheets-in-wordpress/</guid>
      <description>&lt;p&gt;WordPress is a great CMS (Content Management System) is you want to get a site up and running very quickly. It&amp;#8217;s themable and within the theming framework, WordPress includes the ability to include popular assets like JQuery. All it takes is a simple command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
wp_enqueue_script(&#39;jquery&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What if you don&amp;#8217;t want to use the version of JQuery included in WordPress though? There are several reasons you would require a different version, compatibility for example.&lt;/p&gt;

&lt;p&gt;In order to use a custom asset you can do something like the following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
wp_deregister_script(&#39;jquery&#39;);
wp_register_script(&#39;jquery&#39;, &#39;http://ajax.googleapis.com/ajax/libs/jquery/1.4.1/jquery.min.js&#39;, false);
wp_enqueue_script(&#39;jquery&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will deregister the current jquery script which is the default included with WordPress and set it to your custom version. You can also register your own scripts like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
wp_register_script(&#39;myajaxscript&#39;, &#39;mythemedir/js/ajaxstuff.js&#39;, false);
wp_enqueue_script(&#39;myajaxscript&#39;);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>