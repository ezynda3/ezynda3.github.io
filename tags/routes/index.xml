<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Routes on Ed Zynda - Coder, Hacker, Superhero</title>
    <link>http://edzynda.com/tags/routes/index.xml</link>
    <description>Recent content in Routes on Ed Zynda - Coder, Hacker, Superhero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 Ed Zynda.</copyright>
    <atom:link href="http://edzynda.com/tags/routes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Route/Model Binding In Laravel</title>
      <link>http://edzynda.com/using-routemodel-binding-in-laravel/</link>
      <pubDate>Mon, 14 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://edzynda.com/using-routemodel-binding-in-laravel/</guid>
      <description>&lt;p&gt;As I work more and more with Laravel, I keep running across some really cool time saving tricks. One of those time savers is route/model binding.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s say that you have the following route setup.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
Route::get(&#39;books/{book}&#39;, function($book) {
    return Book::find($book);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s pretty simple right? Basically you point your browser at /books and then pass a book id and then use the &amp;#8216;Book&amp;#8217; model to fetch that book from the database. But say we already decided that the &amp;#8216;books&amp;#8217; route should always be working with the book model and a book should be fetched automatically. Laravel gives us a method for explicitly binding the &amp;#8216;Book&amp;#8217; model to our routes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
Route::model(&#39;book&#39;, &#39;Book&#39;);
 
Route::get(&#39;books/{book}&#39;, function($book) {
    return $book;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Laravel will take the id you pass to the route and automatically fetch it behind the scenes. What if we want to fetch a book by something other than it&amp;#8217;s id? What if we want to access our books using a URI similar to /books/BookTitle? Instead of Route::model we can use Route::bind like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
Route::bind(&#39;book&#39;, function($value, $route) {
    return Book::whereTitle($value);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a really good way to cut down on lines of code and at the same time keep it more readable.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>