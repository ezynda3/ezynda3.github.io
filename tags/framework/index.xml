<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ed Zynda - Coder, Hacker, Superhero</title>
    <link>http://edzynda.com/tags/framework/index.xml</link>
    <description>Recent content on Ed Zynda - Coder, Hacker, Superhero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 Ed Zynda.</copyright>
    <atom:link href="http://edzynda.com/tags/framework/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Test The Untestable With AspectMock</title>
      <link>http://edzynda.com/test-the-untestable-with-aspectmock/</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://edzynda.com/test-the-untestable-with-aspectmock/</guid>
      <description>&lt;p&gt;Some of us have had the pleasure of working with someone else&amp;rsquo;s ancient codebase to either add new features or fix bugs. It&amp;rsquo;s never fun and usually a pain. Because of the design (or lack thereof) of the application, it doesn&amp;rsquo;t lend itself to unit testing. The code is littered with static method calls, objects instantiated inside methods rather than being injected through a constructor, and other elements of poor design. This makes the codebase very fragile and any small change could break something if you aren&amp;rsquo;t careful. How do we test the untestable? AspectMock to the rescue!&lt;/p&gt;

&lt;p&gt;Using the power of AOP and the Go! AOP framework AspectMock allows you to create test doubles for almost anything anywhere in your code from public and private methods to static methods and even system functions like time().&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at an example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

class UserCreator
{
    public function create(array $data)
    {
        $user = new User($data);
        $user-&amp;gt;save();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have a UserCreator class that depends on a User object to save a newly created user to the database. We&amp;rsquo;ll pretend this works great but would like to have a test in place to avoid any future defects. We need to mock the User object somehow though because we don&amp;rsquo;t want to make any calls to the database during our test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
function testUserCreate()
{
    $user = Test::double(&#39;User&#39;, [&#39;save&#39; =&amp;gt; null]));
    $service = new UserCreator;
    $service-&amp;gt;create([&#39;name&#39; =&amp;gt; &#39;Tony Stark&#39;]);
    $user-&amp;gt;verifyInvoked(&#39;save&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when you run your test, AspectMock basically intercepts the call to the &amp;lsquo;save&amp;rsquo; method and prevents it from touching the database.&lt;/p&gt;

&lt;p&gt;You can even mock builtin PHP functions for greater flexibility.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
namespace demo;
test::func(&#39;demo&#39;, &#39;time&#39;, &#39;now&#39;);
$this-&amp;gt;assertEquals(&#39;now&#39;, time());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AspectMock opens up a whole new world of possibilities when it comes to testing your legacy and even modern projects. Check out the project on &lt;a href=&#34;https://github.com/Codeception/AspectMock&#34; title=&#34;AspectMock&#34;&gt;GitHub&lt;/a&gt; for more detailed documentation and give it a try in one your projects.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Book: Aspect-Oriented Programming in PHP</title>
      <link>http://edzynda.com/new-book-aspect-oriented-programming-in-php/</link>
      <pubDate>Sat, 20 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://edzynda.com/new-book-aspect-oriented-programming-in-php/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been looking for a way to challenge myself as well as showcase some of my knowledge to the world. After some thinking, I&amp;rsquo;ve decided that I would go ahead and write a book.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been reading a lot about aspect-oriented programming and really like what it provides to enhance object-oriented programming. There isn&amp;rsquo;t a lot of information about this in the PHP community so I figured a book would be a great way to drum up some more interest and help create a larger community around the subject of AOP.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve already got a sample of the book up on Leanpub. You can check it out at &lt;a href=&#34;http://leanpub.com/aopinphp&#34;&gt;http://leanpub.com/aopinphp&lt;/a&gt;. Feel free to read it and send me any feedback as far as what you might like to see covered in the rest of the book. I plan on pushing some more updates very soon so expect to see a minimum viable product up and available for purchase in the next few weeks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Aspect Oriented PHP Using Go! AOP Framework</title>
      <link>http://edzynda.com/aspect-oriented-php-using-go-aop-framework/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://edzynda.com/aspect-oriented-php-using-go-aop-framework/</guid>
      <description>

&lt;p&gt;In my &lt;a href=&#34;http://edzynda.com/aspect-oriented-php-and-the-interceptor-pattern&#34;&gt;last article&lt;/a&gt;  we took a look at using aspect oriented programming (AOP) in PHP by installing the excellent AOP PECL extension for PHP. This is great if you have admin access to the servers you run your code on. It&amp;rsquo;s very common though, for people to run their code on shared hosting. These types of providers don&amp;rsquo;t usually provide a way for you to install any extra PHP extensions besides the common extensions they provide. It would much easier if there was a package we could use instead. Lucky for us, there is!&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/goaop/framework&#34;&gt;Go! AOP Framework&lt;/a&gt; for PHP was created by &lt;a href=&#34;https://github.com/lisachenko&#34;&gt;Alexander Lisachenko&lt;/a&gt; and provides a way to use AOP in PHP without installing an extension. It accomplishes this by cleverly using autoloading, reflection and some other nifty features of modern PHP.&lt;/p&gt;

&lt;p&gt;###Installation&lt;/p&gt;

&lt;p&gt;First we need to install the package with composer.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s created a simple compose.json file with our dependencies and also define a simple namespace for our code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;require&amp;quot;: {
        &amp;quot;goaop/framework&amp;quot;: &amp;quot;^0.6.0&amp;quot;
    },
    &amp;quot;autoload&amp;quot;: {
        &amp;quot;psr-4&amp;quot;: {
            &amp;quot;Stark\\&amp;quot;: &amp;quot;src/&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can install from the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ composer install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need to create what we&amp;rsquo;ll call our AOP kernel. This is where we will register our &lt;strong&gt;aspects&lt;/strong&gt;, as we&amp;rsquo;ll see later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// src/AOP/Kernel.php
&amp;lt;?php namespace Stark\AOP;

use Go\Core\AspectKernel;
use Go\Core\AspectContainer;

class Kernel extends AspectKernel
{
    /**
     * Configure an AspectContainer with advisors, aspects and pointcuts
     *
     * @param AspectContainer $container
     *
     * @return void
     */
    protected function configureAop(AspectContainer $container)
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Third we need to initialize the kernel. This should ideally be done in your application&amp;rsquo;s front controller.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// public/index.php
&amp;lt;?php
include __DIR__ . &#39;/../vendor/autoload.php&#39;; // use composer&#39;s autoloader

// Initialize an application aspect container
$applicationAspectKernel = \Stark\AOP\Kernel::getInstance();
$applicationAspectKernel-&amp;gt;init([
    &#39;debug&#39; =&amp;gt; true, // use &#39;false&#39; for production mode
    // Cache directory
    &#39;cacheDir&#39; =&amp;gt; __DIR__ . &#39;/../cache&#39;
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally we can start creating aspects to modify our code.&lt;/p&gt;

&lt;h3 id=&#34;using-go-aop&#34;&gt;Using Go! AOP&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s pretend we have a little Facebook service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// src/Service/Facebook.php
&amp;lt;?php namespace Stark\Service;

class Facebook
{
    public function doStuff()
    {
        echo &amp;quot;Facebook stuff!&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s create an aspect to intercept any method called from that class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// src/AOP/Aspect/Monitor.php
&amp;lt;?php namespace Stark\AOP\Aspect;

use Go\Aop\Aspect;
use Go\Aop\Intercept\FieldAccess;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\After;
use Go\Lang\Annotation\Before;
use Go\Lang\Annotation\Around;
use Go\Lang\Annotation\Pointcut;

/**
 * Monitor aspect
 */
class Monitor implements Aspect
{

    /**
     * Method that will be called before real method
     *
     * @param MethodInvocation $invocation Invocation
     * @Before(&amp;quot;execution(public Stark\Service\Facebook-&amp;gt;*(*))&amp;quot;)
     */
    public function beforeMethodExecution(MethodInvocation $invocation)
    {
        $obj = $invocation-&amp;gt;getThis();
        echo &#39;Calling Before Interceptor for method: &#39;,
        is_object($obj) ? get_class($obj) : $obj,
        $invocation-&amp;gt;getMethod()-&amp;gt;isStatic() ? &#39;::&#39; : &#39;-&amp;gt;&#39;,
        $invocation-&amp;gt;getMethod()-&amp;gt;getName(),
        &#39;()&#39;,
        &amp;quot;&amp;lt;br&amp;gt;\n&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we have to register the new aspect in our kernel.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// src/AOP/Kernel.php
&amp;lt;?php namespace Stark\AOP;

use Go\Core\AspectKernel;
use Go\Core\AspectContainer;
use Stark\AOP\Aspect\Monitor;

class Kernel extends AspectKernel
{
    /**
     * Configure an AspectContainer with advisors, aspects and pointcuts
     *
     * @param AspectContainer $container
     *
     * @return void
     */
    protected function configureAop(AspectContainer $container)
    {
        $container-&amp;gt;registerAspect(new Monitor());
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally in our front controller we can add these few lines to run our little service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// public/index.php
&amp;lt;?php
$fb = new \Stark\Service\Facebook();
$fb-&amp;gt;doStuff();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run index.php you&amp;rsquo;ll get the following output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Calling Before Interceptor for method: Stark\Service\Facebook-&amp;gt;doStuff()
Facebook stuff!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Go! AOP Framework uses annotations rather than global functions to define &lt;strong&gt;jointpoints&lt;/strong&gt; and &lt;strong&gt;pointcuts&lt;/strong&gt;. &amp;lsquo;beforeMethodExecution()&amp;rsquo; is our &lt;strong&gt;advice&lt;/strong&gt; in this instance. We used the &amp;lsquo;@Before&amp;rsquo; annotation to intercept before the method is called. Similarly we can use &amp;lsquo;@After&amp;rsquo; and &amp;lsquo;@Around&amp;rsquo; as joinpoints as well.&lt;/p&gt;

&lt;p&gt;The rest of the annotation defines the pointcut which is &amp;lsquo;execution&amp;rsquo; in this case. We can also use &amp;lsquo;access&amp;rsquo; for reading/writing of class properties, initialization for when a class is first created and many others.&lt;/p&gt;

&lt;p&gt;One other neat trick we can use is intercepting custom annotations. Go! AOP includes Doctrine&amp;rsquo;s annotation reader package so we can create a custom annotation like so.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// src/Annotation/Custom.php
&amp;lt;?php namespace Stark\Annotation;

use Doctrine\Common\Annotations\Annotation;

/**
 * @Annotation
 * @Target(&amp;quot;METHOD&amp;quot;)
 */
class Custom extends Annotation
{
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next let&amp;rsquo;s modify our Facebook service&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// src/Service/Facebook.php
&amp;lt;?php namespace Stark\Service;

use Stark\Annotation\Custom;

class Facebook
{
    /**
     * @Custom
     */
    public function doStuff()
    {
        echo &amp;quot;Facebook stuff!&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;and our aspect.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// src/AOP/Aspect/Monitor.php
&amp;lt;?php namespace Stark\AOP\Aspect;

use Go\Aop\Aspect;
use Go\Aop\Intercept\FieldAccess;
use Go\Aop\Intercept\MethodInvocation;
use Go\Lang\Annotation\After;
use Go\Lang\Annotation\Before;
use Go\Lang\Annotation\Around;
use Go\Lang\Annotation\Pointcut;

/**
 * Monitor aspect
 */
class Monitor implements Aspect
{

    /**
     * Method that will be called before real method
     *
     * @param MethodInvocation $invocation Invocation
     * @Before(&amp;quot;@annotation(Stark\Annotation\Custom)&amp;quot;)
     */
    public function beforeMethodExecution(MethodInvocation $invocation)
    {
        $obj = $invocation-&amp;gt;getThis();
        echo &#39;Calling Before Interceptor for method: &#39;,
        is_object($obj) ? get_class($obj) : $obj,
        $invocation-&amp;gt;getMethod()-&amp;gt;isStatic() ? &#39;::&#39; : &#39;-&amp;gt;&#39;,
        $invocation-&amp;gt;getMethod()-&amp;gt;getName(),
        &#39;()&#39;,
        &amp;quot;&amp;lt;br&amp;gt;\n&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We should get the same result as before.&lt;/p&gt;

&lt;p&gt;This framework is full of features and it opens up a lot of new possibilities in PHP. To learn more about what you can do with Go! AOP, check out the official &lt;a href=&#34;http://go.aopphp.com/docs/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Is A Microframework? Getting Started With Silex</title>
      <link>http://edzynda.com/what-is-a-microframework-getting-started-with-silex/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://edzynda.com/what-is-a-microframework-getting-started-with-silex/</guid>
      <description>&lt;p&gt;There is no shortage of coding frameworks these days. I can&amp;rsquo;t scroll through my twitter and facebook feeds or my favorite dev forums without stumbling upon something new. Like a hungry barracuda, I&amp;rsquo;m instantly attracted to new shiny things. While browsing reddit.com/r/php I came across a mention of a microframework called &lt;a href=&#34;http://silex.sensiolabs.org/&#34; title=&#34;Silex&#34; target=&#34;_blank&#34;&gt;Silex&lt;/a&gt;. Now you may be wondering what a microframework is. I was wondering the same thing, so I took a look at the project&amp;rsquo;s website to figure out for myself.&lt;/p&gt;

&lt;p&gt;It turns out that a microframework, just like the name implies, is just a barebones framework meant to give the developer access to powerful tools without the bulk of a full-on framework. Silex is a microframework which utilizes components from the popular &lt;a href=&#34;http://symfony.com/&#34; title=&#34;Symfony2&#34; target=&#34;_blank&#34;&gt;Symfony2&lt;/a&gt; framework. In fact it&amp;rsquo;s written and maintained by the same people at Sensiolabs. It&amp;rsquo;s meant for applications consisting of usually one php file but you can definitely build something much bigger. Installing and using Silex is pretty straight-forward especially if you are familiar with other modern PHP frameworks.&lt;/p&gt;

&lt;p&gt;Like all modern PHP projects you start with a composer.json file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;require&amp;quot;: {
        &amp;quot;silex/silex&amp;quot;: &amp;quot;~1.1&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run composer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer install  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create a public facing directory with an index.php file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir public  
$ touch index.php  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should end up with the following directory structure.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;âââ composer.json  
âââ composer.lock  
âââ vendor  
â âââ ...  
âââ public  
âââ index.php  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to bootstrap Silex so we can start using it in our index.php file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
// public/index.php
 
require_once __DIR__.&#39;/../vendor/autoload.php&#39;;
 
$app = new Silex\Application;
 
// definitions
 
$app-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above snippet, we&amp;rsquo;ve created an instance of Silex called &amp;lsquo;$app&amp;rsquo;. Now we can use &amp;lsquo;$app&amp;rsquo; to define things like routes and service providers before calling &amp;lsquo;$app-&amp;gt;run()&amp;rsquo; which will load our application.&lt;/p&gt;

&lt;p&gt;Defining routes is pretty simple. For each route you need to know the method (e.g. GET or POST), the URI pattern you want to match and method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
// public/index.php
 
require_once __DIR__.&#39;/../vendor/autoload.php&#39;;
 
use Symfony\Component\HttpFoundation\Request;
 
$app = new Silex\Application;
 
// definitions
$app-&amp;gt;get(&#39;/&#39;, function()
{
    return &#39;&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;/&amp;quot;&amp;gt;Enter your name: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; /&amp;gt;&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot; /&amp;gt;&amp;lt;/form&amp;gt;&#39;;
});
 
$app-&amp;gt;post(&#39;/&#39;, function(Request $request)
{
    $name = $request-&amp;gt;get(&#39;name&#39;);
    return &amp;quot;Hello! Welcome &amp;quot; . $name . &amp;quot;!&amp;quot;;
});
 
$app-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, we defined two routes. The GET request returns a form which is then handled by our POST route once it is submitted. To access the variables passed in our POST request we use Symfony&amp;rsquo;s HttpFoundation\Request component and the &amp;lsquo;get()&amp;rsquo; method. An instance of of Request is automatically injected into our route closure by Silex using type-hinting or what I like to call magic.&lt;/p&gt;

&lt;p&gt;Hopefully from this tutorial you can get an idea for how to create a small yet powerful app using Silex.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started With Laravel 4 and Vagrant</title>
      <link>http://edzynda.com/getting-started-with-laravel-4-and-vagrant/</link>
      <pubDate>Tue, 20 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://edzynda.com/getting-started-with-laravel-4-and-vagrant/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve worked with a handful of different PHP frameworks over the years. From ZEND Framework to Codeigniter, all have their pros and cons. Some of them are more difficult to work with than others. None of them, however, have been more enjoyable for me to work with than Laravel.&lt;/p&gt;

&lt;p&gt;I came across Laravel while randomly browsing the web. I don&amp;rsquo;t even remember what I was looking for but after reading more about Laravel and how simple it was to setup, I was hooked. In this article I&amp;rsquo;ll take you through setting up a PHP development environment for Laravel 4.&lt;/p&gt;

&lt;p&gt;In this tutorial, I will also be introducing you to a utility called Vagrant. Vagrant makes it ridiculously easy to create a virtual machine in which to run and test your web applications. It uses VirtualBox as a backend and is pretty straightforward once you get into it. No more fussing with WAMP, XAMP, or MAMP environments. You can easily create a small virtual machine that more closely resembles your production environment with a just few commands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Install VirtualBox and Vagrant&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On a standard Debian or Ubuntu box you should be able to run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install virtualbox  
$ sudo apt-get install vagrant  
$ sudo apt-get install linux-headers-$(uname -r)  
$ sudo dpkg-reconfigure virtualbox-dkms  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This installs VirtualBox, Vagrant and it&amp;rsquo;s dependencies. It also compiles the various kernel modules needed for VirtualBox to run correctly.&lt;/p&gt;

&lt;p&gt;On my Gentoo box, I run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ emerge virtualbox  
$ emerge virtualbox-modules  
$ emerge vagrant  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2. Setup The Vagrant Environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Vagrant&amp;rsquo;s virtual machines instances are based on prebuilt configurations called &amp;lsquo;boxes&amp;rsquo;. The following command will download a box based on Ubuntu Precise Pangolin (32bit) and name it &amp;lsquo;precise32&amp;#8242;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vagrant box add precise32 http://files.vagrantup.com/precise32.box  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You now no longer have to download that box and can create any number of VM instances based on this build.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir my_dev_env
$ cd my_dev_env
$ vagrant init precise32
$ vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! You now have a fully functioning Ubuntu VM ready to play around with. To work with the VM run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vagrant ssh  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you will notice that the VM doesn&amp;rsquo;t automatically have a webserver or mysql or really anything needed for a development environment installed. You can go ahead and install everything you need manually but fortunately, Vagrant is scriptable. You can go ahead and write a script to install everything you need after running &amp;lsquo;vagrant up&amp;rsquo; but why do that when it can be done for you?&lt;/p&gt;

&lt;p&gt;Head on over to PuPHPet to see what I mean.&lt;/p&gt;

&lt;p&gt;This handy GUI will take you through configuring a Vagrant environment that&amp;rsquo;s functional as soon as it boots up.&lt;/p&gt;

&lt;p&gt;First select &amp;lsquo;Create Locally&amp;rsquo;. Next, for this tutorial we&amp;rsquo;ll select Debian Wheezy as our base. There&amp;rsquo;s no reason to change the vagrant box name but you can change the &amp;lsquo;Name Your Box&amp;rsquo; section if you wish. You can also change the ip address that this VM will be accessed from.&lt;/p&gt;

&lt;p&gt;One final thing I do in this section is change the default sync folder to &amp;lsquo;./work&amp;rsquo;. I&amp;rsquo;ll explain why later.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.edzynda.com/media/PuPHPet-step-1-.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-259&#34; alt=&#34;PuPHPet-step-1-&#34; src=&#34;http://www.edzynda.com/media/PuPHPet-step-1-.png&#34; width=&#34;680&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the Server Basics section you can safely leave everything as default. If you want to add things like your own personal aliases file, you can add that here.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.edzynda.com/media/PuPHPet-step-2.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-260&#34; alt=&#34;PuPHPet-step-2&#34; src=&#34;http://www.edzynda.com/media/PuPHPet-step-2.png&#34; width=&#34;640&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the HTTP Server I choose Nginx because it&amp;rsquo;s awesome. Choose the host name you want to use for you dev environment. We&amp;rsquo;ll add that to our /etc/hosts file later for easy access. Everything else can safely stay the same.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.edzynda.com/media/PuPHPet-step-3.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-263&#34; alt=&#34;PuPHPet-step-3&#34; src=&#34;http://www.edzynda.com/media/PuPHPet-step-3.png&#34; width=&#34;640&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I keep everything here as default as well. Make sure &amp;lsquo;Install Composer&amp;rsquo; is checked. We&amp;rsquo;ll need that to install Laravel later. You can add any other PHP modules you want if you wish.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.edzynda.com/media/PuPHPet-step-4.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-264&#34; alt=&#34;PuPHPet-step-4&#34; src=&#34;http://www.edzynda.com/media/PuPHPet-step-4.png&#34; width=&#34;640&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Database section should be pretty straightforward. Just create a root password and setup a non-root user.&lt;a href=&#34;http://www.edzynda.com/media/PuPHPet-step-5.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-265&#34; alt=&#34;PuPHPet-step-5&#34; src=&#34;http://www.edzynda.com/media/PuPHPet-step-5.png&#34; width=&#34;640&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally you can hit &amp;lsquo;Create My Manifest&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.edzynda.com/media/PuPHPet-step-6.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-266&#34; alt=&#34;PuPHPet-step-6&#34; src=&#34;http://www.edzynda.com/media/PuPHPet-step-6.png&#34; width=&#34;640&#34; height=&#34;280&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the .zip file has finished downloading run the following&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ unzip wheezy64.zip  
$ mv wheezy64 laravel_dev  
$ cd laravel_dev  
$ ls  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll notice that this directory is cluttered with stuff. Normally Vagrant uses the top level directory of your environment to sync with a folder on the VM. In this case it will sync with &amp;lsquo;/var/www&amp;rsquo;. This comes in handy for developing on the local machine. Remember that we chose &amp;lsquo;./work&amp;rsquo; as our local sync directory back in the GUI. It&amp;rsquo;s not created by default, so we have to create it ourselves. After that we can start Vagrant as normal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir work  
$ vagrant up  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test to make sure everything is working run the following&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo echo &#39;192.168.56.101 laravel.dev&#39; &amp;gt;&amp;gt; /etc/hosts  
$ cd work  
$ echo &#39;&amp;lt;?php phpinfo(); ?&amp;gt;&#39; &amp;gt; index.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &amp;lsquo;laravel.dev&amp;rsquo; should be replaced with whatever you named your virtualhost back in the GUI. Open your web browser of choice and go to &amp;lsquo;&lt;a href=&#34;http://laravel.dev&#39;&#34;&gt;http://laravel.dev&#39;&lt;/a&gt; and you should see the familiar PHP Info page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Install Laravel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now to install Laravel we are going to use Composer which is an easy utility for installing various PHP related software such as the Laravel framework.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vagrant ssh  
$ cd /var/www  
$ composer create-project laravel/laravel your-project-name --prefer-dist  
$ exit  
$ chmod -R 777 my-project/app/storage  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now point your web browser to &amp;lsquo;&lt;a href=&#34;http://laravel.dev/my-project/public&#39;&#34;&gt;http://laravel.dev/my-project/public&#39;&lt;/a&gt;. You may have to &amp;lsquo;chmod -R 777&amp;#8242; the storage directory one more time as Laravel creates a &amp;lsquo;session&amp;rsquo; directory that needs to be writeable.&lt;/p&gt;

&lt;p&gt;If all goes well you should see the Laravel welcome screen stating that &amp;#8220;You Have Arrived.&amp;#8221;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.edzynda.com/media/laravel-success.jpg&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-270&#34; alt=&#34;laravel-success&#34; src=&#34;http://www.edzynda.com/media/laravel-success-300x168.jpg&#34; width=&#34;300&#34; height=&#34;168&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You should now have a functioning Laravel 4 development environment.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>