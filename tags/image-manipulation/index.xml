<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Image Manipulation on Ed Zynda - Coder, Hacker, Superhero</title>
    <link>http://www.edzynda.com/tags/image-manipulation/index.xml</link>
    <description>Recent content in Image Manipulation on Ed Zynda - Coder, Hacker, Superhero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2016 Ed Zynda.</copyright>
    <atom:link href="http://www.edzynda.com/tags/image-manipulation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Simple Image Manipulation With Intervention Image</title>
      <link>http://www.edzynda.com/simple-image-manipulation-with-intervention-image/</link>
      <pubDate>Fri, 27 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://www.edzynda.com/simple-image-manipulation-with-intervention-image/</guid>
      <description>&lt;p&gt;A lot of web applications include some sort of photo uploading functionality. Whether it&amp;#8217;s allowing a user to upload a personal avatar or to create and manage an entire photo gallery with watermarking features, it&amp;#8217;s somewhat of a pain to code. PHP includes several built-in functions for accomplishing this using the GD library but they&amp;#8217;re cumbersome at best. Luckily someone else feels your pain and has written a class that makes it a snap to work with images. &amp;#8216;&lt;a title=&#34;Intervention\Image&#34; href=&#34;http://intervention.olivervogel.net/&#34; target=&#34;_blank&#34;&gt;Intervention\Image&lt;/a&gt;&amp;#8216; is written by &lt;a title=&#34;Oliver Vogel&#34; href=&#34;http://olivervogel.net/&#34; target=&#34;_blank&#34;&gt;Oliver Vogel&lt;/a&gt; and it integrates brilliantly with our favorite framework Laravel!&lt;/p&gt;

&lt;p&gt;Installation like anything that uses Composer is a snap. Add this to the &amp;#8220;require&amp;#8221; section of your composer.json file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;require&amp;quot;: {
        &amp;quot;intervention/image&amp;quot;: &amp;quot;dev-master&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer install  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add use it in Laravel open the &amp;#8216;config/app.php&amp;#8217; file. Add this to the $providers array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
&#39;Intervention\Image\ImageServiceProvider&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next add this to the $aliases array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
&#39;Image&#39; =&amp;gt; &#39;Intervention\Image\Facades\Image&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will allow you to reference the class as &amp;#8216;Image&amp;#8217; and use all of it&amp;#8217;s static methods.&lt;/p&gt;

&lt;p&gt;One great feature of the &amp;#8216;&lt;a title=&#34;Intervention\Image&#34; href=&#34;http://intervention.olivervogel.net/&#34; target=&#34;_blank&#34;&gt;Intervention\Image&lt;/a&gt;&amp;#8216; class is that it&amp;#8217;s methods are chainable just like most Laravel classes. Uploading, resizing and saving an image to an new location can be accomplished in a single line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
// resizing an uploaded file
Image::make(Input::file(&#39;photo&#39;)-&amp;gt;getRealPath())-&amp;gt;resize(300, 200)-&amp;gt;save(&#39;foo.jpg&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on &amp;#8216;&lt;a title=&#34;Intervention\Image&#34; href=&#34;http://intervention.olivervogel.net/&#34; target=&#34;_blank&#34;&gt;Intervention\Image&lt;/a&gt;&amp;#8216; and how it can be used, check out the &lt;a title=&#34;Intervention\Image&#34; href=&#34;http://intervention.olivervogel.net/&#34; target=&#34;_blank&#34;&gt;official website&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>