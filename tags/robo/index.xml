<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Robo on Ed Zynda - Coder, Hacker, Superhero</title>
    <link>http://www.edzynda.com/tags/robo/</link>
    <description>Recent content in Robo on Ed Zynda - Coder, Hacker, Superhero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 Ed Zynda.</copyright>
    <lastBuildDate>Fri, 20 Mar 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.edzynda.com/tags/robo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Continuous Integration With Jenkins Part II</title>
      <link>http://www.edzynda.com/continuous-integration-with-jenkins-part-ii/</link>
      <pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.edzynda.com/continuous-integration-with-jenkins-part-ii/</guid>
      <description>In the first part of this series, I showed you how you can easily set up a project to run automated tests using Jenkins. The quickest and easiest way to build your project and run tests is to add a build step that runs a bunch of shell commands. This is fine for small projects but what about larger projects with complex build steps and dependencies?
A better options is to use another tool to automate the build process and perform certain tasks dynamically.</description>
    </item>
    
  </channel>
</rss>