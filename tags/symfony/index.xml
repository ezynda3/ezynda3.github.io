<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ed Zynda - Coder, Hacker, Superhero</title>
    <link>http://edzynda.com/tags/symfony/index.xml</link>
    <description>Recent content on Ed Zynda - Coder, Hacker, Superhero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](http://gohugo.io).</copyright>
    <atom:link href="http://edzynda.com/tags/symfony/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Create A Simple PHP Command Line Tool</title>
      <link>http://edzynda.com/create-a-simple-php-command-line-tool/</link>
      <pubDate>Mon, 03 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://edzynda.com/create-a-simple-php-command-line-tool/</guid>
      <description>&lt;p&gt;PHP is no doubt a great fit for building web applications but it also has the ability to create powerful command line applications. PHP has had this ability for a long time but recently there has been some excellent work done in order to improve the quality of PHP command line tools. The &lt;a href=&#34;http://symfony.com/doc/current/components/console/introduction.html&#34;&gt;Symfony\Console&lt;/a&gt; component makes it incredibly easy to create a command line application that accepts different arguments and options. Let&amp;rsquo;s see how easy it can be.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve decided to do something a little different then the standard &amp;ldquo;do stuff with Twitter&amp;rdquo; app that seems to be popular these days. Instead let&amp;rsquo;s do stuff with Marvel. More specifically let&amp;rsquo;s use data from the &lt;a href=&#34;http://developer.marvel.com/&#34;&gt;Marvel Developer&amp;rsquo;s API&lt;/a&gt; to make a command line app that searches for and displays the description of different characters from the Marvel universe. We&amp;rsquo;ll use an incomplete but usable PHP library called &lt;a href=&#34;https://github.com/caseysoftware/marvel-php&#34;&gt;Marvel-PHP&lt;/a&gt; to help us interact with the API. To get started, create a new directory for your project and call it whatever you like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup the Dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First we need to make sure we pull in the Symfony\Console component and the Marvel-PHP library with composer. Create a &amp;lsquo;composer.json&amp;rsquo; file at the root of your project that looks like this then run &amp;lsquo;composer install&amp;rsquo; from the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;require&amp;quot;: {
        &amp;quot;symfony/console&amp;quot;: &amp;quot;~2.5&amp;quot;,
        &amp;quot;caseysoftware/marvel-helper&amp;quot;: &amp;quot;dev-master&amp;quot;
    },
    &amp;quot;autoload&amp;quot;: {
        &amp;quot;psr-4&amp;quot;: {
            &amp;quot;Stark\\&amp;quot;: &amp;quot;app&amp;quot;
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We pulled in the our dependencies but we&amp;rsquo;ve also created a namespace for our app called &amp;lsquo;Stark&amp;rsquo; that lives in the &amp;lsquo;app&amp;rsquo; directory. That is where the meat of our command line app will live. Go ahead and create that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bootstrap the Application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a normal modern web application, we would most likely have a front controller, usually index.php, as our entry point to the application. This would take care of the routing and bootstrapping of the rest of the application. A command line application isn&amp;rsquo;t much different. Let&amp;rsquo;s create shell script to bootstrap the rest of the app. First, as you&amp;rsquo;ll see in the code below, you will need to acquire credentials from Marvel to access the API. You can grab a public and private key pair &lt;a href=&#34;https://developer.marvel.com/account&#34;&gt;here&lt;/a&gt;. Once you have that, you&amp;rsquo;re ready to continue. Create a file called &amp;lsquo;marvel&amp;rsquo; at the top level of your app and paste the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;#!/usr/bin/env php
&amp;lt;?php
require_once &#39;vendor/autoload.php&#39;;

use Stark\Console\Command\SearchCharacterCommand;
use Symfony\Component\Console\Application;

// API Keys
$public_key = &#39;&amp;lt;YOUR_PUBLIC_KEY&amp;gt;&#39;;
$private_key = &#39;&amp;lt;YOUR_PRIVATE_KEY&amp;gt;&#39;;

$client = new Services_Marvel($public_key, $private_key);

// Bootstrap
$application = new Application();
$application-&amp;gt;add(new SearchCharacterCommand($client));
$application-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line tells the shell or command line interface (bash, sh, zsh, etc&amp;hellip;) to use the PHP interpreter to execute the rest of the script. Then we require composer&amp;rsquo;s autoloader which gives us access to our dependencies and the &amp;lsquo;Stark&amp;rsquo; namespace we created.&lt;/p&gt;

&lt;p&gt;Symfony command line applications are instantiated from the &amp;lsquo;Symfony\Component\Console\Application&amp;rsquo; class and can have a number of commands associated with them. We will create a search command called &amp;lsquo;Stark\Console\Command\SearchCharacterCommand&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Fill out the placeholders for the API keys with the keys you acquired from Marvel. Next we pass those into a new instance of the Marvel-PHP client we included.&lt;/p&gt;

&lt;p&gt;Finally we add a new instance of the &amp;lsquo;SearchCharacterCommand&amp;rsquo; to our application and call the &amp;lsquo;run()&amp;rsquo; method. Symfony takes care of the rest.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Define a Command&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we need define the actual command that should be executed when we run this from the command line. Symfony\Console applications can have multiple commands that can have various arguments and options. Let&amp;rsquo;s see what that would look like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php namespace Stark\Console\Command;

use Services_Marvel;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Formatter\OutputFormatterStyle;

class SearchCharacterCommand extends Command
{
    /**
     * @var Services_Marvel
     */
    private $client;

    /**
     * Constructor
     * @param Services_Marvel $client
     */
    public function __construct(Services_Marvel $client)
    {
        parent::__construct();
        $this-&amp;gt;client = $client;
    }

    /**
     * Configure the command
     */
    protected function configure()
    {
        $this
            -&amp;gt;setName(&#39;search:character&#39;)
            -&amp;gt;setDescription(&#39;Search for a Marvel character&#39;)
            -&amp;gt;addArgument(
                &#39;name&#39;,
                InputArgument::REQUIRED,
                &#39;Who do you want to search for?&#39;
            )
            -&amp;gt;addOption(
                &#39;titles&#39;,
                null,
                InputOption::VALUE_NONE,
                &#39;Display associated titles.&#39;
            );
    }

    /**
     * Execute the command
     * @param InputInterface $input
     * @param OutputInterface $output
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $style = new OutputFormatterStyle(&#39;red&#39;, &#39;yellow&#39;, array(&#39;bold&#39;, &#39;blink&#39;));
        $output-&amp;gt;getFormatter()-&amp;gt;setStyle(&#39;attribution&#39;, $style);

        $name = $input-&amp;gt;getArgument(&#39;name&#39;);

        $text = &#39;&#39;;

        $characters = $this-&amp;gt;client-&amp;gt;characters-&amp;gt;index(1, 25, [&#39;name&#39; =&amp;gt; $name]);

        if (! $characters) {
            $text = &#39;&amp;lt;error&amp;gt;No results found for &#39; . $name . &#39;.&amp;lt;/error&amp;gt;&#39; .PHP_EOL;
        }

        foreach ($characters as $character) {
            $text .= $character-&amp;gt;name . PHP_EOL . PHP_EOL
                . &#39;&amp;lt;info&amp;gt;Description:&amp;lt;/info&amp;gt;&#39; . PHP_EOL . PHP_EOL
                . $character-&amp;gt;description . PHP_EOL . PHP_EOL;

            // --title
            if ($input-&amp;gt;getOption(&#39;titles&#39;)) {
                $text .= &#39;&amp;lt;info&amp;gt;Titles:&amp;lt;/info&amp;gt;&#39; . PHP_EOL . PHP_EOL
                    . $this-&amp;gt;getSeries($character) . PHP_EOL;
            }

            $text .= &#39;&amp;lt;attribution&amp;gt;Data provided by Marvel. Â© 2014 Marvel&amp;lt;/attribution&amp;gt;&#39;;
        }

        $output-&amp;gt;writeln($text);
    }

    /**
     * Get the comic book titles for the characters
     * @param $character
     * @return string
     */
    private function getSeries($character)
    {
        $titles = &#39;&#39;;
        foreach ($character-&amp;gt;series-&amp;gt;items as $series) {
            $titles .= $series-&amp;gt;name . PHP_EOL;
        }

        return $titles;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All commands extend &amp;lsquo;Symfony\Component\Console\Command\Command&amp;rsquo;. The &amp;lsquo;configure()&amp;rsquo; method is used to tell Symfony how to invoke the command. In this case it&amp;rsquo;s&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./marvel search:character &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can create other commands if we want to but we&amp;rsquo;ll stick with one for now. We also define arguments and options to accept. In this case the &amp;lsquo;name&amp;rsquo; argument is required but the &amp;lsquo;titles&amp;rsquo; option is not. So to run a character search you would need to do something like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./marvel search:character Thor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To display the associated comic book titles, add the &amp;lsquo;titles&amp;rsquo; option like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./marvel search:character --titles Thor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output looks something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://edzynda.com/images/marvel-search-output.png&#34; alt=&#34;Output&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &amp;lsquo;execute()&amp;rsquo; method tells Symfony what logic to run when our command is invoked. I won&amp;rsquo;t get too much into how the API client works but you can check out some of the examples in the library&amp;rsquo;s &lt;a href=&#34;https://github.com/caseysoftware/marvel-php&#34;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This should give you a taste of what kind of cool command line tools you can create. For more information and to learn what else the Symfony\Console component can do, check out the &lt;a href=&#34;http://symfony.com/doc/current/components/console/introduction.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Is A Microframework? Getting Started With Silex</title>
      <link>http://edzynda.com/what-is-a-microframework-getting-started-with-silex/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://edzynda.com/what-is-a-microframework-getting-started-with-silex/</guid>
      <description>&lt;p&gt;There is no shortage of coding frameworks these days. I can&amp;rsquo;t scroll through my twitter and facebook feeds or my favorite dev forums without stumbling upon something new. Like a hungry barracuda, I&amp;rsquo;m instantly attracted to new shiny things. While browsing reddit.com/r/php I came across a mention of a microframework called &lt;a href=&#34;http://silex.sensiolabs.org/&#34; title=&#34;Silex&#34; target=&#34;_blank&#34;&gt;Silex&lt;/a&gt;. Now you may be wondering what a microframework is. I was wondering the same thing, so I took a look at the project&amp;rsquo;s website to figure out for myself.&lt;/p&gt;

&lt;p&gt;It turns out that a microframework, just like the name implies, is just a barebones framework meant to give the developer access to powerful tools without the bulk of a full-on framework. Silex is a microframework which utilizes components from the popular &lt;a href=&#34;http://symfony.com/&#34; title=&#34;Symfony2&#34; target=&#34;_blank&#34;&gt;Symfony2&lt;/a&gt; framework. In fact it&amp;rsquo;s written and maintained by the same people at Sensiolabs. It&amp;rsquo;s meant for applications consisting of usually one php file but you can definitely build something much bigger. Installing and using Silex is pretty straight-forward especially if you are familiar with other modern PHP frameworks.&lt;/p&gt;

&lt;p&gt;Like all modern PHP projects you start with a composer.json file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;require&amp;quot;: {
        &amp;quot;silex/silex&amp;quot;: &amp;quot;~1.1&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run composer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer install  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create a public facing directory with an index.php file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir public  
$ touch index.php  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should end up with the following directory structure.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;âââ composer.json  
âââ composer.lock  
âââ vendor  
â âââ ...  
âââ public  
âââ index.php  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to bootstrap Silex so we can start using it in our index.php file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
// public/index.php
 
require_once __DIR__.&#39;/../vendor/autoload.php&#39;;
 
$app = new Silex\Application;
 
// definitions
 
$app-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above snippet, we&amp;rsquo;ve created an instance of Silex called &amp;lsquo;$app&amp;rsquo;. Now we can use &amp;lsquo;$app&amp;rsquo; to define things like routes and service providers before calling &amp;lsquo;$app-&amp;gt;run()&amp;rsquo; which will load our application.&lt;/p&gt;

&lt;p&gt;Defining routes is pretty simple. For each route you need to know the method (e.g. GET or POST), the URI pattern you want to match and method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
// public/index.php
 
require_once __DIR__.&#39;/../vendor/autoload.php&#39;;
 
use Symfony\Component\HttpFoundation\Request;
 
$app = new Silex\Application;
 
// definitions
$app-&amp;gt;get(&#39;/&#39;, function()
{
    return &#39;&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;/&amp;quot;&amp;gt;Enter your name: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; /&amp;gt;&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot; /&amp;gt;&amp;lt;/form&amp;gt;&#39;;
});
 
$app-&amp;gt;post(&#39;/&#39;, function(Request $request)
{
    $name = $request-&amp;gt;get(&#39;name&#39;);
    return &amp;quot;Hello! Welcome &amp;quot; . $name . &amp;quot;!&amp;quot;;
});
 
$app-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, we defined two routes. The GET request returns a form which is then handled by our POST route once it is submitted. To access the variables passed in our POST request we use Symfony&amp;rsquo;s HttpFoundation\Request component and the &amp;lsquo;get()&amp;rsquo; method. An instance of of Request is automatically injected into our route closure by Silex using type-hinting or what I like to call magic.&lt;/p&gt;

&lt;p&gt;Hopefully from this tutorial you can get an idea for how to create a small yet powerful app using Silex.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>