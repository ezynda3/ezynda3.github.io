<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Ed Zynda - Coder, Hacker, Superhero</title>
    <link>http://www.edzynda.com/tags/golang/index.xml</link>
    <description>Recent content in Golang on Ed Zynda - Coder, Hacker, Superhero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 Ed Zynda.</copyright>
    <atom:link href="http://www.edzynda.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Single Executable Web Apps With Go Binary Assets</title>
      <link>http://www.edzynda.com/single-executable-web-apps-with-go-binary-assets/</link>
      <pubDate>Thu, 05 Jan 2017 07:52:54 -0800</pubDate>
      
      <guid>http://www.edzynda.com/single-executable-web-apps-with-go-binary-assets/</guid>
      <description>&lt;p&gt;Go is becoming increasingly popular with building web applications. It&amp;rsquo;s fast, lightweight and easy to learn. Another great feature is to compile your applications into a single redistributable binary. A lot of web applications depend on external assets, however. For the application to work you still need to package your css, JavaScript and image files along with the executable. Let&amp;rsquo;s see if we can fix this.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Imagine you have a single page web application. Your application code is saved in &lt;code&gt;main.go&lt;/code&gt;. Your frontend code is saved in a folder called &lt;code&gt;assets&lt;/code&gt; and called &lt;code&gt;app.js&lt;/code&gt;. You also have a &lt;code&gt;style.css&lt;/code&gt; and a few images. Normally you need to make sure that assets folder exists along side your &lt;code&gt;main&lt;/code&gt; executable wherever you have it deployed. If not your application will complain with a bunch of &lt;code&gt;404 not found&lt;/code&gt; errors.&lt;/p&gt;

&lt;p&gt;In Go, it&amp;rsquo;s possible to convert all of those files to pure Go code and then serve them up like they were sitting on the filesystem. We can accomplish this with two packages &lt;code&gt;jteeuwen/go-bindata&lt;/code&gt; and &lt;code&gt;elazarl/go-bindata-assetfs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first thing we need to do is install the packages.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go get github.com/jteeuwen/go-bindata/...
$ go get github.com/elazarl/go-bindata-assetfs/...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can convert our assets to Go code using the &lt;code&gt;go-bindata&lt;/code&gt; CLI tool.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go-bindata assets/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a file called &lt;code&gt;bindata.go&lt;/code&gt; in your current directory. All the code in that file will be scoped to the &lt;code&gt;main&lt;/code&gt; package. To access any of our files we can use the &lt;code&gt;Asset(string) ([]byte, error)&lt;/code&gt; function. Calling &lt;code&gt;Asset(&amp;quot;assets/app.js&amp;quot;)&lt;/code&gt; will return a &lt;code&gt;[]byte&lt;/code&gt; slice of the &lt;code&gt;app.js&lt;/code&gt; file which we can echo through our web application manually if we wish. An easier method would be to create an endpoint that serves all of those assets as if they were on a fileserver. This is where &lt;code&gt;go-bindata-assetfs&lt;/code&gt; comes in.&lt;/p&gt;

&lt;p&gt;Here is an example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;

	&amp;quot;github.com/elazarl/go-bindata-assetfs&amp;quot;
)

func main() {
	// Use binary asset FileServer
	http.Handle(&amp;quot;/&amp;quot;,
		http.FileServer(
			&amp;amp;assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: &amp;quot;assets&amp;quot;}))

	log.Println(&amp;quot;http server started on :8000&amp;quot;)
	err := http.ListenAndServe(&amp;quot;:8000&amp;quot;, nil)
	if err != nil {
		log.Fatal(&amp;quot;ListenAndServe: &amp;quot;, err)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;go-bindata-assetfs&lt;/code&gt; package includes a &lt;code&gt;Struct&lt;/code&gt; type called &lt;code&gt;AssetFS&lt;/code&gt; that implements the &lt;code&gt;http.Filesystem&lt;/code&gt; interface which looks like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type FileSystem interface {
        Open(name string) (File, error)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To initialize a new &lt;code&gt;AssetFS&lt;/code&gt; we need to pass a few of the helper functions generated by &lt;code&gt;go-bindata&lt;/code&gt;. The final property is &lt;code&gt;Prefix&lt;/code&gt; which sets the root of the &lt;code&gt;FileServer&lt;/code&gt; as whatever we specify.&lt;/p&gt;

&lt;p&gt;In this example we are now serving files at &lt;code&gt;/&lt;/code&gt; and any files that were in &lt;code&gt;assets/&lt;/code&gt; are now accessible from that path. It would be simple to place an &lt;code&gt;index.html&lt;/code&gt; file to use as an entrypoint for a single page application.&lt;/p&gt;

&lt;p&gt;Now we no longer have to distribute our assets along with the final executable. This makes our deployments just a little bit easier and more managable.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How Easy Is It To Containerize A Go App?</title>
      <link>http://www.edzynda.com/how-easy-is-it-to-containerize-a-go-app/</link>
      <pubDate>Tue, 27 Dec 2016 09:18:06 -0800</pubDate>
      
      <guid>http://www.edzynda.com/how-easy-is-it-to-containerize-a-go-app/</guid>
      <description>&lt;p&gt;Recently, I wrote an article on how to &lt;a href=&#34;https://scotch.io/bar-talk/build-a-realtime-chat-server-with-go-and-websockets&#34;&gt;create a simple chat server using WebSockets and Go&lt;/a&gt;. I made the &lt;a href=&#34;https://github.com/scotch-io/go-realtime-chat&#34;&gt;source code&lt;/a&gt; available and it&amp;rsquo;s pretty simple to get the example up and running if you have a basic familiarization with Go. I wanted to see if I could make it easier for people to try out though. For this, I looked to the very popular &lt;a href=&#34;https://docker.io&#34;&gt;Docker&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;Docker has been around for quite some time but, I only recently began toying around with it more seriously. At first it seems pretty complicated but as it turns out, it&amp;rsquo;s really simple to use once you get the hang of the basic commands and concepts.&lt;/p&gt;

&lt;p&gt;This is not going to be a tutorial how to get started with Docker though, I&amp;rsquo;m just going to run through the steps of how I turned my chat application into a redistributable container.&lt;/p&gt;

&lt;p&gt;The first step is obviously to have Docker installed for your specific OS. Head on over to the &lt;a href=&#34;https://docker.io&#34;&gt;Docker website&lt;/a&gt; to fetch that.&lt;/p&gt;

&lt;p&gt;The next step is to create a Dockerfile in the same directory you have your app source code. This is just a file that will tell Docker how to build your container. The Dockerfile for my chat application looks just like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM golang:1.7

MAINTAINER Ed Zynda

RUN mkdir /app
COPY . /app

WORKDIR /app/src
RUN go get -u github.com/gorilla/websocket
RUN go build main.go

CMD [&amp;quot;./main&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s have a look at this line by line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM golang:1.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells Docker that I want to start out with an official Docker container called Golang and use the tagged version 1.7. This container has all of the Golang build tools preinstalled and will provide a good base for us to build upon.&lt;/p&gt;

&lt;p&gt;The Docker hub has thousands of containers provided by Docker and the community which you can download and build upon yourself. There are even containers that literally have nothing in them if you want to keep your final container as light as possible.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MAINTAINER Ed Zynda
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This just says that I&amp;rsquo;m the maintainer of this container. I&amp;rsquo;m a poet and I didn&amp;rsquo;t even know it!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN mkdir /app
COPY . /app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;RUN&lt;/code&gt; keyword allows us to run any command we wish inside our container. In this case I just want to create a new directory to hold our application. Next I use the &lt;code&gt;COPY&lt;/code&gt; keyword to move my source code into the container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WORKDIR /app/src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells Docker that I now want to run commands from within the &lt;code&gt;/app/src&lt;/code&gt; directory. This is just like running &lt;code&gt;cd /app/src&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN go get -u github.com/gorilla/webSocket
RUN go build main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this step, I&amp;rsquo;m just running the normal Go commands to pull down dependencies and then compile the application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CMD [&amp;quot;./main&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final step is to tell Docker which command to run when the container is started. In this case I just want to run the binary called &lt;code&gt;main&lt;/code&gt; which is the result of compiling the Go source.&lt;/p&gt;

&lt;p&gt;After creating my Dockerfile, I can now build the container by running the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t ezynda3/go-chat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will build the container, following the steps in the Dockerfile and then tag it with &lt;code&gt;ezynda3/go-chat&lt;/code&gt;. Since I didn&amp;rsquo;t provide a version number the version will automatically be set to &lt;code&gt;latest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This container only exists on my machine right now though. In order to distribute it so others can use it, I need to publish it to a hub. Docker provides a free hub for public containers at &lt;a href=&#34;https://hub.docker.com&#34;&gt;hub.docker.com&lt;/a&gt;. To push the container up just run the following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker push ezynda3/go-chat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker may complain about invalid credentials. In that case run the following after ensuring you have created an account on Docker&amp;rsquo;s hub site.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will prompt you for your credentials and you should be set to run the previous command again.&lt;/p&gt;

&lt;p&gt;Now on any machine that has Docker installed, we can run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull ezynda3/go-chat
docker run -p 8000:8000 ezynda3/go-chat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will pull the container and then run it mapping port &lt;code&gt;8000&lt;/code&gt; from within the container to port &lt;code&gt;8000&lt;/code&gt; on the host machine.&lt;/p&gt;

&lt;p&gt;As you can see, it was pretty easy to create a nice simple container for a Go application.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Single Page Web App With Go And Vue</title>
      <link>http://www.edzynda.com/single-page-web-app-with-go-and-vue/</link>
      <pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.edzynda.com/single-page-web-app-with-go-and-vue/</guid>
      <description>&lt;p&gt;I wrote a nice little tutorial on creating a single page web application using Go and VueJS. Check it out over at &lt;a href=&#34;https://scotch.io/tutorials/create-a-single-page-app-with-go-echo-and-vue&#34;&gt;Scotch.io&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>